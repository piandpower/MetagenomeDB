#!/usr/bin/env python

import optparse, sys, os, pprint
import MetagenomeDB as mdb

p = optparse.OptionParser(description = """Part of the MetagenomeDB toolkit.
Import objects (Sequence, Collection and Relationship) into the database. Those
objects are provided as JSON- or CSV-formatted descriptions.""")

p.add_option("-i", "--input", dest = "input_fn", metavar = "FILENAME",
	help = "Name of the file containing a description of the objects to import")

p.add_option("-f", "--format", dest = "input_format", choices = ("json", "csv"), metavar = "STRING", default = "json",
	help = "Format of the input file, either 'json' or 'csv' (default: %default)")

p.add_option("--ignore-duplicates", dest = "ignore_duplicates", action = "store_true", default = False,
	help = "If set, ignore duplicate objects errors")

p.add_option("--ignore-missing", dest = "ignore_missing", action = "store_true", default = False,
	help = "If set, ignore relationships that points to missing objects")

p.add_option("--dry-run", dest = "dry_run", action = "store_true", default = False,
	help = "If set, process the input file but does not actually import the objects")

p.add_option("-v", "--verbosity", dest = "verbosity", type = "int", default = 0)

(p, a) = p.parse_args()

def error (msg):
	print >>sys.stderr, "ERROR: %s." % msg
	sys.exit(1)

if (p.input_fn == None):
	error("An input file must be provided")

if (not os.path.exists(p.input_fn)):
	error("File '%s' does not exists" % p.input_fn)

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if (p.verbosity > 0):
	mdb.set_debug_level(p.verbosity)

mdb.show_warnings(False)

BUILDER = {
	"Collection": mdb.Collection,
	"Sequence": mdb.Sequence,
	"Relationship": mdb.Relationship,
}

class NotFound (Exception):
	pass

# retrieve an object based on its xref (object name if the object
# if a Collection, Collection name and object name if the object is
# a Sequence)
def retrieve_xref (xref):
	try:
		collection = xref["@type"]

		# the xref refers to a Collection
		if (collection == "Collection"):
			object = getattr(mdb, collection).find_one(name = xref["@name"])
			if (object == None):
				raise Exception("Unknown Collection '%s'" % xref["@name"])

		# the xref refers to a Sequence
		elif (collection == "Sequence"):
			# we first list all sequences having this name,
			candidates = mdb.Sequence.find(name = xref["@name"])
			# then we filter out those that are not linked to this collection
			object = filter(lambda x: len(list(x.get_collections({ "name": xref["@collection"] }))) > 0, candidates)

			if (len(object) == 0):
				raise NotFound("Unknown Sequence '%s' in Collection '%s'" % (xref["@name"], xref["@collection"]))

			if (len(object) > 1):
				raise Exception("Duplicate Sequence '%s' in Collection '%s'" % (xref["@name"], xref["@collection"]))

			object = object[0]

		else:
			raise ValueError("A relationship many only exists among collection and/or sequences")

	except KeyError as msg:
		raise Exception("Invalid entry: %s" % msg)

	return object

n = 0
for entry in mdb.tools.parser(p.input_fn, p.input_format):
	try:
		type = entry["@type"]
		del entry["@type"]

		if (not type in BUILDER):
			raise Exception("Unknown object type '%s'" % type)

		# if the object to build is a relationship, we
		# first retrieve its source and target objects
		if (type == "Relationship"):
			entry["source"] = retrieve_xref(entry["source"])
			entry["target"] = retrieve_xref(entry["target"])

		object = BUILDER[type](**entry)

		if (not p.dry_run):
			object.commit()

		n += 1

	except mdb.errors.ConnectionError as msg:
		error(str(msg))

	except mdb.errors.DuplicateObject as msg:
		if (p.ignore_duplicates):
			print >>sys.stderr, "WARNING: %s" % str(msg)
		else:
			error(str(msg))

	except NotFound as msg:
		if (p.ignore_missing):
			print >>sys.stderr, "WARNING: %s" % msg
		else:
			error(msg)

	except Exception as msg:
		error("Invalid entry: %s. Entry was:\n %s" % (msg, pprint.pformat(entry)))

print "%s object%s added." % (n, { True: 's', False: '' }[n > 1])

if (p.dry_run):
	print "(dry run)"
