#!/usr/bin/env python

import optparse, sys, os, re, time, pprint

p = optparse.OptionParser(description = """Part of the MetagenomeDB toolkit.
Imports ACE-formatted mapping between reads and contigs into the database.""")

g = optparse.OptionGroup(p, "ACE")

g.add_option("-i", "--input", dest = "input_fn", metavar = "FILENAME",
	help = "ACE file.")

g.add_option("--reads-collection", dest = "reads_collection", metavar = "STRING",
	help = "Name of the collection the reads belong to.")

g.add_option("--contigs-collection", dest = "contigs_collection", metavar = "STRING",
	help = "Name of the collection the contigs belong to.")

g.add_option("--read-id-getter", dest = "read_id_getter", metavar = "PYTHON CODE", default = "%.rd.name")
g.add_option("--contig-id-getter", dest = "contig_id_getter", metavar = "PYTHON CODE", default = "%.name")

p.add_option_group(g)

p.add_option("-v", "--verbosity", dest = "verbosity", type = "int", default = 0)
p.add_option("--dry-run", dest = "dry_run", action = "store_true", default = False)

(p, a) = p.parse_args()

def error (msg):
	print >>sys.stderr, "ERROR: %s." % msg
	sys.exit(1)

if (p.input_fn == None):
	error("An ACE file must be provided")

if (not os.path.exists(p.input_fn)):
	error("File '%s' not found" % p.input_fn)

if (p.reads_collection == None)  or (p.contigs_collection == None):
	error("A collection must be provided for both reads and contigs")

try:
	get_read_id = eval("lambda x: " + p.read_id_getter.replace('%', 'x'))
	get_contig_id = eval("lambda x: " + p.contig_id_getter.replace('%', 'x'))

except SyntaxError, e:
	error("Invalid getter: %s\n%s^" % (e.text, ' ' * (e.offset + 22)))

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

import MetagenomeDB as mdb

try:
	from Bio.Sequencing import Ace
except:
	error("The Biopython library must be installed\nTry 'easy_install Biopython'")

if (p.verbosity > 0):
	mdb.set_debug_level(p.verbosity)

print "Importing '%s' ..." % p.input_fn

print "  validating read and contig sequences ..."

Reads, Contigs = {}, {}

reads = mdb.Collection.find_one(name = p.reads_collection)
if (reads == None):
	error("Unknown collection '%s'" % p.reads_collection)

for read, relationship in reads.get_sequences():
	Reads[str(read["name"])] = read

contigs = mdb.Collection.find_one(name = p.contigs_collection)
if (contigs == None):
	error("Unknown collection '%s'" % p.contigs_collection)

for contig, relationship in contigs.get_sequences():
	Contigs[str(contig["name"])] = contig

i = Ace.parse(open(p.input_fn, 'r'))
c = 0

for contig in i:
	contig_id = get_contig_id(contig)
	if (not contig_id in Contigs):
		error("Unknown contig '%s'" % contig_id)

	for read in contig.reads:
		read_id = get_read_id(read)
		if (not read_id in Reads):
			error("Unknown read '%s'" % read_id)

		c += 1

print "  importing mapping ..."

class ProgressBar:
	def __init__ (self, upper = None):
		self.__min = 0.0
		self.__max = upper + 0.0

	def display (self, value):
		f = (value - self.__min) / (self.__max - self.__min) # fraction
		p = 100 * f # percentage
		s = int(round(80 * f)) # bar size

		sys.stdout.write(' ' * 2 + ('.' * s) + " %4.2f%%\r" % p)
		sys.stdout.flush()

	def clear (self):
		sys.stdout.write(' ' * (2 + 80 + 8) + "\r")
		sys.stdout.flush()

pb = ProgressBar(c)

i = Ace.parse(open(p.input_fn, 'r'))
c = 0

for contig in i:
	contig_id = get_contig_id(contig)
	if (not contig_id in Contigs):
		error("Unknown contig '%s'" % contig_id)

	for read in contig.reads:
		read_id = get_read_id(read)
		if (not read_id in Reads):
			error("Unknown read '%s'" % read_id)

		r = mdb.Relationship(Reads[read_id], Contigs[contig_id], type = "part-of")

		if (p.dry_run):
			print pprint.pformat(r)
		else:
			r.commit()

		c += 1
		pb.display(c)

pb.clear()

print "    done."
