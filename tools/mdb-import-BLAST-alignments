#!/usr/bin/env python

import optparse, sys, os, re, time, pprint

p = optparse.OptionParser(description = """Part of the MetagenomeDB toolkit.
Imports XML-formatted NCBI BLAST alignments into the database.""")

g = optparse.OptionGroup(p, "BLAST")

g.add_option("-i", "--input", dest = "input_fn", metavar = "FILENAME",
	help = "XML-formatted output of a NCBI BLAST sequence alignment.")

g.add_option("-Q", "--query-collection", dest = "queries_collection", metavar = "STRING",
	help = """Name of the collection the query sequences belong to. If not
provided, the query sequences are assumed to be external to the database.""")

g.add_option("--query-id-getter", dest = "query_id_getter", metavar = "PYTHON CODE", default = "%.split()[0]",
	help = "Python code to reformat query identifers (optional); '%' will be replaced by the query identifier. Default: %default")

g.add_option("-H", "--hit-collection", dest = "hits_collection", metavar = "STRING",
	help = """Name of the collection the hit sequences belong to. If not
provided, the hit sequences are assumed to be external to the database.""")

g.add_option("--hit-id-getter", dest = "hit_id_getter", metavar = "PYTHON CODE", default = "%.split()[0]",
	help = "Python code to reformat hit identifers (optional); '%' will be replaced by the hit identifier. Default: %default")

g.add_option("--date", dest = "date", nargs = 3, type = "int",
	help = "Date of the BLAST run (year, month, day). By default, creation date of the input file.")

p.add_option_group(g)

p.add_option("-v", "--verbose", dest = "verbose", action = "store_true", default = False)
p.add_option("--dry-run", dest = "dry_run", action = "store_true", default = False)

(p, a) = p.parse_args()

def error (msg):
	print >>sys.stderr, "ERROR: %s." % msg
	sys.exit(1)

if (p.input_fn == None):
	error("A XML-formatted BLAST alignment output file must be provided")

if (not os.path.exists(p.input_fn)):
	error("File '%s' not found" % p.input_fn)

if ((p.queries_collection == None) + (p.hits_collection == None) == 2):
	error("A collection must be provided for either query or hit sequences")

if (not p.date):
	date = time.localtime(os.path.getmtime(p.input_fn))
	p.date = (date.tm_year, date.tm_mon, date.tm_mday)

else:
	try:
		y, m, d = p.date
		assert (y > 1990), "value '%s' is incorrect for year" % y
		assert (m > 0) and (m < 13), "value '%s' is incorrect for month" % m
		assert (d > 0) and (d < 32), "value '%s' is incorrect for day" % d

	except Exception, msg:
		error("Invalid date: %s" % msg)

try:
	get_query_id = eval("lambda x: " + p.query_id_getter.replace('%', 'x'))
	get_hit_id = eval("lambda x: " + p.hit_id_getter.replace('%', 'x'))

except SyntaxError, e:
	error("Invalid getter: %s\n%s^" % (e.text, ' ' * (e.offset + 22)))

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

import MetagenomeDB as mdb

try:
	from Bio.Blast import NCBIXML
except:
	error("The BioPython library is not installed.\nTry 'easy_install biopython'")

if (p.verbose):
	mdb.max_verbosity()

print "Importing '%s' ..." % p.input_fn

# Check query and hit sequences
print "  validating query and hit sequences ..."

QuerySequences, HitSequences = {}, {}

if (p.queries_collection):
	queries = mdb.Collection.find_one({"name": p.queries_collection})
	if (queries == None):
		error("Unknown collection '%s'" % p.queries_collection)

	for sequence in queries.list_sequences():
		QuerySequences[str(sequence["name"])] = sequence

if (p.hits_collection):
	hits = mdb.Collection.find_one({"name": p.hits_collection})
	if (hits == None):
		error("Unknown collection '%s'" % p.hits_collection)

	for sequence in hits.list_sequences():
		HitSequences[str(sequence["name"])] = sequence

for record in NCBIXML.parse(open(p.input_fn, 'r')):
	query_id = get_query_id(record.query)

	if (p.queries_collection) and (not query_id in QuerySequences):
		error("Unknown query sequence '%s'" % query_id)

	for hit in record.alignment:
		hit_id = get_hit_id(hit.title)

		if (p.hits_collection) and (not hit_id in HitSequences):
			error("Unknown hit sequence '%s'" % hit_id)

# Import
print "  importing HSPs ..."

for record in NCBIXML.parse(open(p.input_fn, 'r')):
	query_id = get_query_id(record.query)
	query = QuerySequences[query_id]

	for hit in record.alignments:
		hit_id = get_hit_id(hit.title)
		hit = HitSequences[hit_id]

		for hsp in hit.hsps:
			r = {
				"type": "similar-to",

				"run.date": {"year": p.date[0], "month": p.date[1], "day": p.date[2]},
				"run.algorithm": {
					"name": record.application,
					"version": record.version,
					"parameters": {
						"matrix": record.matrix,
						"gap_open": record.gap_penalties[0],
						"gap_extend": record.gap_penalties[1],
					},
				},

				"alignment": {
					"source_coordinates": (hsp.query_start, hsp.query_end),
					"source": hsp.query,
					"match": hsp.match,
					"target": hsp.sbjct,
					"target_coordinates": (hsp.sbjct_start, hsp.sbjct_end),
				},

				"score": {
					"fraction_identical": 100.0 * hsp.identities / hit.length,
					"fraction_conserved": 100.0 * hsp.positives / hit.length,
					"expectation": {
						"e_value": hsp.expect,
						"search_space": {
							"database_name": record.database,
							"number_of_sequences": record.database_sequences,
							"number_of_letters": record.num_letters_in_database,
						}
					}
				}
			}

			if (p.dry_run):
				print "    query '%s' to hit '%s'" % (query_id, hit_id)
				for line in pprint.pformat(r).split('\n'):
					print "      %s" % line
			else:
				query.relate_to_sequence(hit, r)
				query.commit()

print "    done."

if (p.dry_run):
	print "(dry run)"
