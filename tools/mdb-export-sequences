#!/usr/bin/env python

import optparse
import sys, os
import re, pprint
import MetagenomeDB as mdb

p = optparse.OptionParser(description = """Part of the MetagenomeDB toolkit.
Export nucleotide or aminoacid sequences from the database. Those sequences
can be in any format supported by Biopython (see http://biopython.org/wiki/SeqIO).""")

p.add_option("-C", "--collection", dest = "collection_name", metavar = "STRING",
	help = "Name of the collection to retrieve the sequences from (mandatory).")

p.add_option("-r", "--recursive", dest = "recursive", action = "store_true", default = False,
	help = """By default only the sequences belonging to the collection provided
are exported. If set, this option will force all sequences belonging to sub-collections
to be exported as well.""")

p.add_option("-o", "--output", dest = "output_fn", metavar = "FILENAME",
	help = "Destination for the sequences (optional). Default: standard output.")

p.add_option("-f", "--format", dest = "output_format", metavar = "STRING", default = "fasta",
	help = """Format of the sequences (optional). Default: %default (see
http://biopython.org/wiki/SeqIO for a list of the formats supported)""")

p.add_option("--id-setter", dest = "sequence_id_setter", metavar = "PYTHON CODE", default = "%",
	help = """Python code to reformat sequence identifiers (optional); '%' will
be replaced by a sequence name. Default: %default".""")

p.add_option("--no-description", dest = "add_description", default = True, action = "store_false",
	help = "if set, will not add sequence's description (if any) in the output file")

g = optparse.OptionGroup(p, "sequence filtering")

g.add_option("-p", "--property-filter", dest = "property_filter", action = "append", nargs = 2, metavar = "KEY VALUE",
	help = """Filter the sequences according to a given key and value. If several
filters are declared, only sequences satisfying them all will be returned (optional).""")

g.add_option("-w", "--white-list", dest = "white_list_fn", metavar = "FILENAME",
	help = """Text file to read sequence names from (one name per line). Only
sequences with names found in this file will be returned (optional).""")

g.add_option("-b", "--black-list", dest = "black_list_fn", metavar = "FILENAME",
	help = """Text file to read sequence names from (one name per line). Only
sequences with names not found in this file will be returned (optional).""")

p.add_option_group(g)

mdb.tools.include("connection_options", globals())

p.add_option("-v", "--verbose", dest = "verbose", action = "store_true", default = False)
p.add_option("--no-progress-bar", dest = "display_progress_bar", action = "store_false", default = True)
p.add_option("--dry-run", dest = "dry_run", action = "store_true", default = False)
p.add_option("--version", dest = "display_version", action = "store_true", default = False)

(p, a) = p.parse_args()

def error (msg):
	msg = str(msg)
	if msg.endswith('.'):
		msg = msg[:-1]
	print >>sys.stderr, "ERROR: %s." % msg
	sys.exit(1)

if (p.display_version):
	print mdb.version
	sys.exit(0)

mdb.tools.include("id_modifier", globals())
set_sequence_id = id_modifier(p.sequence_id_setter)

if (not p.collection_name):
	error("A collection name must be provided")

if (p.white_list_fn) and (not os.path.exists(p.white_list_fn)):
	error("File '%s' not found" % p.white_list_fn)

if (p.black_list_fn) and (not os.path.exists(p.black_list_fn)):
	error("File '%s' not found" % p.black_list_fn)

mdb.tools.include("id_modifier", globals())
set_sequence_id = id_modifier(p.sequence_id_setter)

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if (p.verbose):
	mdb.max_verbosity()

try:
	mdb.connect(**connection_parameters)
except Exception as msg:
	error(msg)

try:
	collection = mdb.Collection.find_one({"name": p.collection_name})

except Exception as msg:
	error(msg)

if (collection == None):
	error("unknown collection '%s'" % p.collection_name)

if (p.output_fn == None):
	output_fh = sys.stdout
	output_fn = "<standard output>"
else:
	output_fh = open(p.output_fn, 'w')

collections = [collection]

if (p.recursive):
	def crawl (c):
		for subc in c.list_sub_collections():
			collections.append(subc)
			crawl(subc)

	crawl(collection)

if (p.property_filter):
	try:
		filter = {}
		for (key, value) in p.property_filter:
			filter[key] = mdb.tools.parse_value_and_modifier(value)

	except Exception as msg:
		error(msg)
else:
	filter = None

def read_list (fn):
	i = open(fn, 'rU')
	list = {}

	while True:
		line = i.readline()
		if (line == ''):
			break

		line = line.strip()
		if (line == ''):
			continue

		list[line] = True

	return list

whitelist = read_list(p.white_list_fn) if (p.white_list_fn) else None
blacklist = read_list(p.black_list_fn) if (p.black_list_fn) else None

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

try:
	from Bio import SeqIO
	from Bio.Seq import Seq
	from Bio.SeqRecord import SeqRecord
except:
	error("the BioPython library is not installed.\nTry 'easy_install biopython'")

print "exporting sequences to '%s' (%s format)..." % (p.output_fn, p.output_format)

n_sequences_total = 0

try:
	for collection in collections:
		n_sequences = collection.count_sequences()
		if (n_sequences == 0):
			continue

		print "  from collection '%s' (%s sequence%s)" % (
			collection["name"],
			"{:,}".format(n_sequences),
			{True: 's', False: ''}[n_sequences > 1]
		)

		pb = mdb.tools.progressbar(n_sequences)
		n_sequences_exported = 0

		def sequences():
			global n_sequences_exported

			for sequence in collection.list_sequences(filter):
				name = set_sequence_id(sequence["name"])

				if (whitelist != None) and (name not in whitelist):
					continue

				if (blacklist != None) and (name in blacklist):
					continue

				if (p.add_description):
					description = sequence.get_property("description", '')
				else:
					description = ''

				yield SeqRecord(
					id = name,
					seq = Seq(sequence["sequence"]),
					description = description
				)

				n_sequences_exported += 1
				if (p.display_progress_bar):
					pb.display(n_sequences_exported)

			if (p.display_progress_bar):
				pb.clear()

		if (p.dry_run):
			[sequence for sequence in sequences()]
		else:
			SeqIO.write(sequences(), output_fh, p.output_format)

		print "    %s sequence%s exported" % (
			"{:,}".format(n_sequences_exported),
			{True: 's', False: ''}[n_sequences_exported > 1]
		)

		n_sequences_total += n_sequences_exported

	print "%s sequence%s exported total" % (
		"{:,}".format(n_sequences_total),
		{True: 's', False: ''}[n_sequences_total > 1]
	)

except Exception as msg:
	error(msg)

if (p.dry_run):
	print "done (dry run)."
else:
	print "done."
