#!/usr/bin/env python

import optparse, sys, os, pprint

p = optparse.OptionParser(description = """Part of the MetagenomeDB toolkit.
Import objects (Sequence and/or Collection) into the database. Those
objects are provided as JSON- or CSV-formatted descriptions.""")

p.add_option("-i", "--input", dest = "input_fn", metavar = "FILENAME",
	help = "Name of the file containing a description of the objects to import, or '-' to read from the standard input")

p.add_option("-f", "--format", dest = "input_format", choices = ("json", "csv"), metavar = "STRING", default = "csv",
	help = "Format of the input file, either 'json' or 'csv' (default: %default)")

p.add_option("--ignore-duplicates", dest = "ignore_duplicates", action = "store_true", default = False,
	help = "If set, ignore duplicate objects errors")

p.add_option("--ignore-missing", dest = "ignore_missing", action = "store_true", default = False,
	help = "If set, ignore relationships that points to missing objects")

p.add_option("--dry-run", dest = "dry_run", action = "store_true", default = False,
	help = "If set, process the input file but does not actually import the objects")

p.add_option("-v", "--verbose", dest = "verbose", action = "store_true", default = False)

g = optparse.OptionGroup(p, "Connection")

g.add_option("--host", dest = "connection_host", metavar = "HOSTNAME", default = "localhost",
	help = "Host name or IP address of the MongoDB server (optional; default: %default)")

g.add_option("--port", dest = "connection_port", metavar = "INTEGER", default = 27017,
	help = "Port of the MongoDB server (optional; default: %default)")

g.add_option("--db", dest = "connection_db", metavar = "STRING", default = "MetagenomeDB",
	help = "Name of the database in the MongoDB server (optional; default: '%default')")

g.add_option("--user", dest = "connection_user", metavar = "STRING", default = '',
	help = "User for the MongoDB server connection (optional; default: '%default')")

g.add_option("--password", dest = "connection_password", metavar = "STRING", default = '',
	help = "Password for the MongoDB server connection (optional; default: '%default')")

p.add_option_group(g)

(p, a) = p.parse_args()

def error (msg):
	if str(msg).endswith('.'):
		msg = str(msg[:-1])
	print >>sys.stderr, "ERROR: %s." % msg
	sys.exit(1)

if (p.input_fn == None):
	error("An input file must be provided")

if (p.input_fn != '-') and (not os.path.exists(p.input_fn)):
	error("File '%s' does not exists" % p.input_fn)

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

import MetagenomeDB as mdb

if (p.verbose):
	mdb.max_verbosity()

if (p.connection_host or p.connection_port or p.connection_db or p.connection_user or p.connection_password):
	mdb.connect(p.connection_host, p.connection_port, p.connection_db, p.connection_user, p.connection_password)

BUILDER = {
	"collection": mdb.Collection,
	"sequence": mdb.Sequence,
}

class NotFound (Exception):
	pass

# retrieve an object based on its xref (object name if the object
# if a Collection, Collection name and object name if the object is
# a Sequence)
def retrieve_xref (entry):
	try:
		type = entry["_type"].lower()

		if (not type in BUILDER):
			raise Exception("Unknown object type '%s'" % type)

		# the xref refers to a Collection
		if (type == "collection"):
			object = mdb.Collection.find_one({"name": entry["name"]})
			if (object == None):
				raise Exception("Unknown Collection '%s'" % entry["name"])

			return object

		# the xref refers to a Sequence
		if (type == "sequence"):
			# we first list all sequences having this name,
			candidates = mdb.Sequence.find({"name": entry["name"]})

			# then we filter out those that are not linked to this collection
			candidates_ = filter(lambda s: s.count_collections({"name": entry["_collection"]}) > 0, candidates)

			if (len(candidates_) == 0):
				raise NotFound("Unknown Sequence '%s' in Collection '%s'" % (entry["_name"], entry["_collection"]))

			if (len(candidates_) > 1):
				raise Exception("Duplicate Sequence '%s' in Collection '%s'" % (entry["_name"], entry["_collection"]))

			return candidates_[0]

	except KeyError as msg:
		raise Exception("Invalid entry: %s" % msg)

def pull (map, key):
	value = map[key]
	del map[key]
	return value

n_created, n_connected = 0, 0

for entry in mdb.tools.parser(p.input_fn, p.input_format):
	try:
		type = pull(entry, "_type").lower()

		# if the object to build is a relationship, we
		# first retrieve its source and target objects
		if (type == "relationship"):
			source = retrieve_xref(pull(entry, "_source"))
			target = retrieve_xref(pull(entry, "_target"))

			if (p.dry_run):
				print "import: connection between %s and %s" % (source, target)
				for line in pprint.pformat(entry).split('\n'):
					print "  %s" % line
			else:
				source._connect_to(target, entry)
				source.commit()

			n_connected += 1
		else:
			if (not type in BUILDER):
				raise Exception("Unknown object type '%s'" % type)

			if (p.dry_run):
				print "import: %s" % type
				for line in pprint.pformat(entry).split('\n'):
					print "  %s" % line
			else:
				object = BUILDER[type](entry)
				object.commit()

			n_created += 1

	except mdb.errors.ConnectionError as msg:
		error(str(msg))

	except mdb.errors.DuplicateObject as msg:
		if (p.ignore_duplicates):
			print >>sys.stderr, "WARNING: %s" % str(msg)
		else:
			error(str(msg))

	except NotFound as msg:
		if (p.ignore_missing):
			print >>sys.stderr, "WARNING: %s" % msg
		else:
			error(msg)

	except Exception as msg:
		error("Invalid entry: %s. Entry was:\n %s" % (msg, pprint.pformat(entry)))

print "%s object%s added, %s connection%s added." % (
	n_created, {True: 's', False: ''}[n_created > 1],
	n_connected, {True: 's', False: ''}[n_connected > 1]
)

if (p.dry_run):
	print "(dry run)"
