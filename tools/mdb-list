#!/usr/bin/env python

import optparse
import sys, os
import pprint
import MetagenomeDB as mdb

p = optparse.OptionParser(description = """Part of the MetagenomeDB toolkit.
List collections and sequences in the database.""")

p.add_option("-o", "--output", dest = "output_fn", metavar = "FILENAME",
	help = "Destination for the output (optional). Default: standard output.")

p.add_option("-p", "--with-properties", dest = "display_properties", action = "store_true", default = False,
	help = """If set, collections' properties will be displayed as well.""")

mdb.tools.include("connection_options", globals())

p.add_option("-v", "--verbose", dest = "verbose", action = "store_true", default = False)
p.add_option("--version", dest = "display_version", action = "store_true", default = False)

(p, a) = p.parse_args()

def error (msg):
	if str(msg).endswith('.'):
		msg = str(msg)[:-1]
	print >>sys.stderr, "ERROR: %s." % msg
	sys.exit(1)

if (p.display_version):
	print mdb.version
	sys.exit(0)

if (p.output_fn == None):
	output_fh = sys.stdout
else:
	output_fh = open(p.output_fn, 'w')

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if (p.verbose):
	mdb.max_verbosity()

try:
	mdb.connect(**connection_parameters)
except Exception as msg:
	error(msg)

print "current database content:"

def collection_title (collection):
	title = "  collection '%s'" % collection["name"]
	n = collection.count_sequences()
	if (n > 1):
		title += " (%s sequences)" % "{:,}".format(n)
	elif (n > 0):
		title += " (%s sequence)" % "{:,}".format(n)
	return title

def traverse (map, prefix = None):
	for key in sorted(map.keys()):
		if (key.startswith('_')):
			continue

		if (prefix == None):
			prefix_ = [key]
		else:
			prefix_ = prefix + [key]

		if (type(map[key]) == dict):
			for item in traverse(map[key], prefix_):
				yield item
		else:
			yield (prefix_, map[key])

sorted_ = lambda x: sorted(x, lambda x, y: cmp(x["name"], y["name"]))

try:
	for collection in sorted_(mdb.Collection.find()):
		print collection_title(collection)

		if (p.display_properties):
			for (key, value) in traverse(collection.get_properties()):
				if (type(value) == unicode):
					value = "'%s'" % value
				print "    %s = %s" % ('.'.join(key), value)

		for supercollection in sorted_(collection.list_super_collections()):
			print "    (super-collection: '%s')" % supercollection["name"]

		for subcollection in sorted_(collection.list_sub_collections()):
			print "    (sub-collection: '%s')" % subcollection["name"]

		print

except mdb.errors.DBConnectionError as msg:
	error(msg)

print "done."
