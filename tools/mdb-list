#!/usr/bin/env python

import optparse, sys, os, pprint

p = optparse.OptionParser(description = """Part of the MetagenomeDB toolkit.
List collections and sequences in the database.""")

p.add_option("-o", "--output", dest = "output_fn", metavar = "FILENAME",
	help = "Destination for the output (optional). Default: standard output.")

p.add_option("-p", "--with-properties", dest = "display_properties", action = "store_true", default = False,
	help = """If set, collections' properties will be displayed as well.""")

p.add_option("-v", "--verbose", dest = "verbose", action = "store_true", default = False)

g = optparse.OptionGroup(p, "Connection")

g.add_option("--host", dest = "connection_host", metavar = "HOSTNAME", default = "localhost",
	help = "Host name or IP address of the MongoDB server (optional). Default: %default")

g.add_option("--port", dest = "connection_port", metavar = "INTEGER", default = 27017,
	help = "Port of the MongoDB server (optional). Default: %default")

g.add_option("--db", dest = "connection_db", metavar = "STRING", default = "MetagenomeDB",
	help = "Name of the database in the MongoDB server (optional). Default: '%default'")

g.add_option("--user", dest = "connection_user", metavar = "STRING", default = '',
	help = "User for the MongoDB server connection (optional). Default: '%default'")

g.add_option("--password", dest = "connection_password", metavar = "STRING", default = '',
	help = "Password for the MongoDB server connection (optional). Default: '%default'")

p.add_option_group(g)

(p, a) = p.parse_args()

def error (msg):
	if str(msg).endswith('.'):
		msg = str(msg)[:-1]
	print >>sys.stderr, "ERROR: %s." % msg
	sys.exit(1)

if (p.output_fn == None):
	output_fh = sys.stdout
else:
	output_fh = open(p.output_fn, 'w')

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

import MetagenomeDB as mdb

if (p.verbose):
	mdb.max_verbosity()

if (p.connection_host or p.connection_port or p.connection_db or p.connection_user or p.connection_password):
	try:
		mdb.connect(p.connection_host, p.connection_port, p.connection_db, p.connection_user, p.connection_password)
	except Exception as msg:
		error(msg)

# List all collections and their sub-collections, as a list of edges
nodes, edges = {}, {}

for a in mdb.Collection.find():
	if (not a in edges):
		edges[a] = {}

	for b in a.list_sub_collections():
		if (not b in edges[a]):
			edges[a][b] = True

	nodes[a] = True

for node in nodes:
	if (not node in edges):
		edges[node] = {}

del nodes

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

def collection_title (collection):
	n = collection.count_sequences()
	return "%s (%s sequence%s)" % (
		collection["name"],
		n,
		{True: 's', False: ''}[n > 1]
	)

def traverse (map, prefix = None):
	for key in sorted(map.keys()):
		if (key.startswith('_')):
			continue

		if (prefix == None):
			prefix_ = [key]
		else:
			prefix_ = prefix + [key]

		if (type(map[key]) == dict):
			for item in traverse(map[key], prefix_):
				yield item
		else:
			yield (prefix_, map[key])

sorted_ = lambda x: sorted(x, lambda x, y: cmp(x["name"], y["name"]))

for collection in sorted_(edges):
	print >>sys.stdout, collection_title(collection)

	if (p.display_properties):
		for (key, value) in traverse(collection.get_properties()):
			if (type(value) == unicode):
				value = "'%s'" % value
			print "	%s = %s" % ('.'.join(key), value)

	for subcollection in sorted_(edges[collection]):
		print >>sys.stdout, "	(sub-collection: '%s')" % subcollection["name"]

	print >>sys.stdout
